name: Build and deploy to AWS ECS

on:
  workflow_dispatch:
    inputs:
      commit_message:
        description: 'Message for manual workflow run'
        default: 'Manual workflow run'
        required: false
  push:
    branches:
      - main

env:
  AWS_REGION: ca-central-1
  AWS_ECS_CLUSTER: DevCluster

jobs:
  deploy:
    name: Build and deploy
    runs-on: ubuntu-latest
    concurrency:
      group: build-and-deploy
      cancel-in-progress: true

    steps:
      - name: Define workflow variables
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            commit_message=$(echo "${{ github.event.inputs.commit_message }}" | jq -sRr @json | tr -d '\n')
            commit_author=$(printf "%s"  "${{ github.actor }}" | jq -sRr @json)
          else
            commit_message=$(echo "${{ github.event.head_commit.message }}" | jq -sRr @json | tr -d '\n')
            commit_author=$(printf "%s"  "${{ github.event.head_commit.author.name  }}" | jq -sRr @json)
          fi
          echo "COMMIT_MESSAGE=$commit_message" >> $GITHUB_ENV
          echo "COMMIT_AUTHOR=$commit_author" >> $GITHUB_ENV

          attachments='[{"color": "", "fields": [{"title": "Status", "value": "", "short": false}, {"title": "Repository", "value": "${{ github.repository }}", "short": true}, {"title": "Branch", "value": "${{ github.ref }}", "short": true}, {"title": "Commit Author", "value": '$commit_author', "short": true}, {"title": "Commit SHA", "value": "${{ github.sha }}", "short": true}, {"title": "Commit Message", "value": '$commit_message', "short": false} ]}]'
          echo "SLACK_MESSAGE_TEMPLATE=$attachments" >> $GITHUB_ENV

      - name: Send Slack notification (before build)
        run: |
          timestamp=$(TZ=America/Vancouver date +"%-l:%M%p PT")
          slack_message=$(jq --arg timestamp "$timestamp" '.[0].fields[0].value = "Build started at \($timestamp)" | .[0].color = "warning"' <<< "$SLACK_MESSAGE_TEMPLATE")

          response=$(curl https://slack.com/api/chat.postMessage -X POST -H 'Content-type: application/json; charset=utf-8' -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" --data @- <<EOF
          {
            "channel": "${{ vars.SLACK_CHANNEL_ID }}",
            "attachments": $slack_message
          }
          EOF
          )

          echo "SLACK_TS=$(echo $response | jq -r '.ts')" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1

      - name: Scale down task
        run: |
          aws ecs update-service \
            --cluster ${{ env.AWS_ECS_CLUSTER }} \
            --service ${{ vars.AWS_ECS_SERVICE }} \
            --region ${{ env.AWS_REGION }} \
            --desired-count 0 \
            --force-new-deployment

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: |
            /tmp/.buildx-cache
            ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build, tag, and push Docker image
        uses: docker/build-push-action@v6
        with:
          platforms: linux/arm64
          push: true
          tags: "${{ vars.AWS_ECR_REPOSITORY }}:latest"
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Update Slack message (deployment started)
        if: always()
        run: |
          timestamp=$(TZ=America/Vancouver date +"%-l:%M%p PT")
          slack_message=$(jq --arg timestamp "$timestamp" '.[0].fields[0].value = "Build finished, deployment started at \($timestamp)" | .[0].color = "warning"' <<< "$SLACK_MESSAGE_TEMPLATE")

          response=$(curl https://slack.com/api/chat.update -X POST -H 'Content-type: application/json; charset=utf-8' -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" --data @- <<EOF
          {
              "ts": "${{ env.SLACK_TS }}",
              "channel": "${{ vars.SLACK_CHANNEL_ID }}",
              "attachments": $slack_message
          }
          EOF
          )

      - name: Start deployment
        run: |
          aws ecs update-service \
            --cluster ${{ env.AWS_ECS_CLUSTER }} \
            --service ${{ vars.AWS_ECS_SERVICE }} \
            --region ${{ env.AWS_REGION }} \
            --desired-count 1 \
            --force-new-deployment

      - name: Wait for deployment ready state
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.AWS_ECS_CLUSTER }} \
            --services ${{ vars.AWS_ECS_SERVICE }} \
            --region ${{ env.AWS_REGION }}

      - name: Update Slack message (completed)
        if: success()
        run: |
          timestamp=$(TZ=America/Vancouver date +"%-l:%M%p PT")
          slack_message=$(jq --arg timestamp "$timestamp" '.[0].fields[0].value = "Deployment completed at \($timestamp)" | .[0].color = "good"' <<< "$SLACK_MESSAGE_TEMPLATE")

          response=$(curl https://slack.com/api/chat.update -X POST -H 'Content-type: application/json; charset=utf-8' -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" --data @- <<EOF
          {
              "ts": "${{ env.SLACK_TS }}",
              "channel": "${{ vars.SLACK_CHANNEL_ID }}",
              "attachments": $slack_message,
              "actions": [
                  {
                      "type": "button",
                      "text": "View application",
                      "url": "${{ vars.APP_URL }}"
                  }
              ]
          }
          EOF
          )

      - name: Update Slack message (failed)
        if: failure()
        run: |
          timestamp=$(TZ=America/Vancouver date +"%-l:%M%p PT")
          slack_message=$(jq --arg timestamp "$timestamp" '.[0].fields[0].value = "Build and/or deployment failed at \($timestamp)" | .[0].color = "danger"' <<< "$SLACK_MESSAGE_TEMPLATE")

          response=$(curl https://slack.com/api/chat.update -X POST -H 'Content-type: application/json; charset=utf-8' -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" --data @- <<EOF
          {
              "ts": "${{ env.SLACK_TS }}",
              "channel": "${{ vars.SLACK_CHANNEL_ID }}",
              "attachments": $slack_message,
              "actions": [
                  {
                      "type": "button",
                      "text": "View details",
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
              ]
          }
          EOF
          )


      - name: Update Slack message (cancelled)
        if: cancelled()
        run: |
          timestamp=$(TZ=America/Vancouver date +"%-l:%M%p PT")
          slack_message=$(jq --arg timestamp "$timestamp" '.[0].fields[0].value = "Build and/or deployment cancelled at \($timestamp)" | .[0].color = "danger"' <<< "$SLACK_MESSAGE_TEMPLATE")

          response=$(curl https://slack.com/api/chat.update -X POST -H 'Content-type: application/json; charset=utf-8' -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" --data @- <<EOF
          {
              "ts": "${{ env.SLACK_TS }}",
              "channel": "${{ vars.SLACK_CHANNEL_ID }}",
              "attachments": $slack_message
          }
          EOF
          )
